// ############################################################
// PLC to adjust fast attenuators
// Author: Gary Yendell
//
// Macros:
//   PLC = $(PLC=20) - PLC number to use
//   STATE_GPIO = $(STATE_GPIO=1) - GPIO state for PLC
//   HEARTBEAT_GPIO = $(HEARTBEAT_GPIO=2) - GPIO heartbeat for PLC
//   SHUTTER_CLOSED_POSITION = $(SHUTTER_CLOSED_POSITION) - Shutter close position in counts
//
// Variables Used:
//   P4001 - P4100
// ############################################################

//// GPIO

#define GPIO_Heartbeat M(31 + $(HEARTBEAT_GPIO=1))
#define GPIO_State M(31 + $(STATE_GPIO=2))
// GPIO State Enum
#define GPIO_STATE_BAD 0
#define GPIO_STATE_OK 1

//// Status/Error Reporting

// A client can read this bitmask and parse out various statuses from the bits
#define StatusBitMask M4000
StatusBitMask->u.user:$0.0.8
#define MinAttenuationStatus M4001
MinAttenuationStatus->u.user:$0.0.1

#define Version P4000
Version = 1014

#define State P4001
// State Enum
#define STARTING 0
#define WAITING 1
#define ACTIVE 2
#define ERROR 3

#define Error P4002
// Error Enum
#define NO_ERROR 0
#define MAX_ATTENUATION_ERROR 1
#define MOVE_FAILURE_ERROR 2

// Error reset for client
#define ErrorReset P4010

//// Attenuation Logic

// Attenuation change demand for client
#define AttenuationChange P4020

// We point Attenuation to an address and point filters to each bit of that address.
// This links each filter to a single bit of Attenuation, with each bit representing
// whether a filter should be in or out to produce the correct Attenuation.

// Attenuation Bit Mask - [0,15]
#define AttenuationDemand M4020
AttenuationDemand->u.user:$10.0.8
// Attenuation Bits - 0 or 1
#define Filter1Demand M4021
#define Filter2Demand M4022
#define Filter3Demand M4023
#define Filter4Demand M4024
Filter1Demand->u.user:$10.0.1
Filter2Demand->u.user:$10.1.1
Filter3Demand->u.user:$10.2.1
Filter4Demand->u.user:$10.3.1

// Store of current positions [0,1]
#define Filter1Position P4021
#define Filter2Position P4022
#define Filter3Position P4023
#define Filter4Position P4024

#define Filter1Demand1 P4071
#define Filter2Demand1 P4072
#define Filter3Demand1 P4073
#define Filter4Demand1 P4074

#define Filter1Demand2 P4081
#define Filter2Demand2 P4082
#define Filter3Demand2 P4083
#define Filter4Demand2 P4084

//// Other Constants

#define FILTER_TRAVEL 100  // Counts
#define MAX_ATTENUATION 15  // All filters in: 1 + 2 + 4 + 8


Close
Clear PLC $(PLC_NUMBER)
Open PLC $(PLC_NUMBER)

GPIO_Heartbeat = 0
GPIO_State = GPIO_STATE_BAD
State = STARTING
Error = NO_ERROR
Sys.CdTimer[$(PLC_NUMBER)] = 0

AttenuationDemand = 0  // TODO: We can't assume this

While (1==1) {

    If (ErrorReset == 1) {
        ErrorReset = 0
        Error = 0
        State = STARTING
    }

    AttenuationChange = 0

    // Error must be cleared to re-enter this loop
    While (State != ERROR) {
        // Limit Heartbeat rate
        If (Sys.CdTimer[$(PLC_NUMBER)] == 0) {
            GPIO_Heartbeat ^= 1  // Toggle Heartbeat - 0 -> 1, 1 -> 0
            Sys.CdTimer[$(PLC_NUMBER)] = 500  // Reset timer
        }

        GPIO_State = GPIO_STATE_OK
        State = WAITING

        // Wait for an external input
        If (AttenuationChange != 0) {
            State = ACTIVE

            // Restrict demand >= 0
            If (AttenuationDemand + AttenuationChange < 0) {
                AttenuationChange = 0
                MinAttenuationStatus = 1
            }
            // Restrict demand <= MAX_ATTENUATION
            If (AttenuationDemand + AttenuationChange > MAX_ATTENUATION) {
                AttenuationChange = 0
                // We can do no more - close the shutter
                CMD "#5J=$(SHUTTER_CLOSED_POSITION)"
                // TODO: GoSub All filters in
                State = ERROR
                Error = MAX_ATTENUATION_ERROR
            }

            // Add change to the active attenuation demand - the demand is always relative
            AttenuationDemand += AttenuationChange
            AttenuationChange = 0  // Reset client input

            If (State != ERROR) {
                // Move filters based on the bits of the updated AttenuationDemand
                // FilterXDemand points to the bits of AttenuationDemand, so automatically update when it is changed
                //
                // First move any filters that are out, but should be in, then move any filters that are in, but
                // should be out. This ensures attenuation is always at least as high as the demand.
                //
                // The logic of both of these moves is the same:
                // if the following is satisfied
                //   - Demand does not match position already - Demand ^ Position
                //   - Demand matches current move type (in/out) - 1 &/^ Demand
                // then FilterXMove will be set to +/-FILTER_TRAVEL and it will move in the relative jog
                // else FilterXMove will be zero and the relative jog will not move the filter

                Filter1Demand1 = (Filter1Demand | Filter1Position) * FILTER_TRAVEL
                Filter2Demand1 = (Filter2Demand | Filter2Position) * FILTER_TRAVEL
                Filter3Demand1 = (Filter3Demand | Filter3Position) * FILTER_TRAVEL
                Filter4Demand1 = (Filter4Demand | Filter4Position) * FILTER_TRAVEL
                Filter1Demand2 = Filter1Demand * FILTER_TRAVEL
                Filter2Demand2 = Filter2Demand * FILTER_TRAVEL
                Filter3Demand2 = Filter3Demand * FILTER_TRAVEL
                Filter4Demand2 = Filter4Demand * FILTER_TRAVEL

                CMD "&2 #1,2,3,4J/ B1R"

                // Make sure previous move is finished before we move filters out | 0 -> Moving
                while ((M140 & M240 & M340 & M440) == 1) {
                    // Wait while all motors are not moving
                    dwell 0
                }
                while ((M140 & M240 & M340 & M440) == 0) {
                    // Wait while any motor is moving
                    dwell 0
                }

                // TODO: Can we do any verification of the moves without an encoder?

                // Store new positions
                Filter1Position = Filter1Demand
                Filter2Position = Filter2Demand
                Filter3Position = Filter3Demand
                Filter4Position = Filter4Demand
            }

            If (State == ERROR) {
                GPIO_State = GPIO_STATE_BAD
            }

        }  // Active if block

    }  // Healthy Loop

}  // Forever Loop - Waits for error reset

Close

Enable PLC $(PLC_NUMBER)
